section
    h2 Summary

section
    ol
        li Choosing right architecture from beginning is very important
        li.fragment Think about code scalability
        li.fragment Use domain-driven design only when business complexity is bigger issue than added abstractions
        li.fragment Couple code along the axis of change
        li.fragment Treat each request as a distinct use case

section
    h3 Sources
    ul
        li: a(href='https://jimmybogard.com/vertical-slice-architecture/') Jimmy Bogard: Vertical Slice Architecture
        li: a(href='http://grahamberrisford.com/AM%202%20Methods%20support/06DesignPatternPairs/Domain%20Driven%20Design%20v.%20Transaction%20script.htm') Graham Berrisford: Domain Driven Design, Transaction Script and Smart UI
        li: a(href='http://www.informit.com/articles/article.aspx?p=1398617') Martin Fowler: Framework Design Guidelines: Domain Logic Patterns
        li: a(href='https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8') RDX: Modern Software Over-Engineering Mistakes
        li: a(href='https://dzone.com/articles/reevaluating-the-layered-architecture') Robert Brautigam: Reevaluating the Layered Architecture